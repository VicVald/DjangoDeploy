services:
  # ----------------------------------------------------
  # 1. BANCO DE DADOS (PostgreSQL)
  # ----------------------------------------------------
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    env_file:
      - .env
    volumes:
      # Mantém os dados persistentes mesmo se o container for destruído
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # VARIÁVEIS DE AMBIENTE ESSENCIAIS
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # ----------------------------------------------------
  # 2. MESSAGE BROKER (RabbitMQ para Celery)
  # ----------------------------------------------------
  broker:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq_broker
    environment:
      # Configurações do usuário RabbitMQ
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      # Interface de gerenciamento (opcional, remova em produção se não for necessário)
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # ----------------------------------------------------
  # 3. APLICAÇÃO DJANGO (Web/Gunicorn)
  # ----------------------------------------------------
  web:
    # Usa o seu Dockerfile multi-stage na pasta atual
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_gunicorn
    # Mapeia a porta interna do Gunicorn (8000) para a porta interna do Nginx
    expose:
      - "8000"
    volumes:
      # Compartilha os arquivos estáticos com o Nginx
      - static_volume:/app/static
      - media_volume:/app/media
      - frontend_build:/app/frontend/build
    environment:
      # Variáveis para a aplicação Django
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG:-False}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      # Variáveis do DB (use o nome do serviço 'db' como HOST)
      DB_HOST: db 
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # Variáveis do Celery (use o nome do serviço 'broker' como HOST)
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@broker:5672//
    
    # Executa a migração ANTES de iniciar o Gunicorn usando uv run
    command: sh -c "uv run python manage.py migrate --noinput && uv run gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
      
    # Garante que o DB e o Broker estejam prontos antes de iniciar o Django
    depends_on:
      db:
        condition: service_healthy # Espera o PostgreSQL estar saudável
      broker:
        condition: service_healthy
    restart: always

  # ----------------------------------------------------
  # 4. CELERY WORKER
  # ----------------------------------------------------
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker_1
    # Mesmas variáveis de ambiente do serviço 'web'
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: db 
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@broker:5672//
    
    # Comando para iniciar o worker Celery usando uv run
    command: uv run celery -A config worker --loglevel=info --concurrency=2
    
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: always

  # ----------------------------------------------------
  # 5. CELERY BEAT (Agendador de tarefas periódicas - Opcional)
  # ----------------------------------------------------
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: db 
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@broker:5672//
    
    # Comando para iniciar o Celery Beat usando uv run
    command: uv run celery -A config beat --loglevel=info
    
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: always
    
  # ----------------------------------------------------
  # 6. NGINX (Servidor Web)
  # ----------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    # Mapeia a porta 80/443 do host para o Nginx
    ports:
      - "80:80"
      - "443:443" # Para HTTPS
    volumes:
      # Copia o arquivo de configuração local (crie este arquivo!)
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
      # Mapeia o diretório de arquivos estáticos e de mídia do Django para o Nginx
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web # Nginx depende do Gunicorn para encaminhar as requisições
    restart: always

# Define volumes para persistência de dados
volumes:
  postgres_data:
  static_volume: # Para arquivos estáticos (collectstatic)
  media_volume:  # Para arquivos de mídia (uploads)
  frontend_build: # Para build do React/frontend